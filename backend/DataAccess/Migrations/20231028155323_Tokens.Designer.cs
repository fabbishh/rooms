// <auto-generated />
using System;
using HousingReservation.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ReservationDbContext))]
    [Migration("20231028155323_Tokens")]
    partial class Tokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourAgencyId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeGroupId");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8b8a185-ba7a-445e-8303-f8969b6cad66"),
                            AttributeGroupId = new Guid("3bcb2cba-b30e-4b81-8213-e4bc3f10f0a8"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Кондиционер",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("fa578def-e5d1-462a-b4da-51fc1ff2a41c"),
                            AttributeGroupId = new Guid("3bcb2cba-b30e-4b81-8213-e4bc3f10f0a8"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Обогреватель",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("af6980a3-6d5b-43da-a3cb-0316926da2ab"),
                            AttributeGroupId = new Guid("3bcb2cba-b30e-4b81-8213-e4bc3f10f0a8"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Утюг",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("13ecd677-bbf1-42a8-a753-3c0fdef804a8"),
                            AttributeGroupId = new Guid("3bcb2cba-b30e-4b81-8213-e4bc3f10f0a8"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Гладильная доска",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("52b0878f-fb31-4fb1-b4ac-970e28626730"),
                            AttributeGroupId = new Guid("3bcb2cba-b30e-4b81-8213-e4bc3f10f0a8"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Телевизор",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("116c162c-9b10-4cb0-b71e-4469da9b0e8b"),
                            AttributeGroupId = new Guid("3bcb2cba-b30e-4b81-8213-e4bc3f10f0a8"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Фен",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("8255e4e1-ea29-4181-82ff-5b04a496bc1f"),
                            AttributeGroupId = new Guid("1f9112b2-47ca-4c9c-80a6-c083fb45b90f"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Wi-Fi",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("3b7d621a-dd88-4a63-a34c-0eb47c661f17"),
                            AttributeGroupId = new Guid("1f9112b2-47ca-4c9c-80a6-c083fb45b90f"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Сауна",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("9a5bc088-2994-4c93-8ade-6fdcd003eeb5"),
                            AttributeGroupId = new Guid("1f9112b2-47ca-4c9c-80a6-c083fb45b90f"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Спортзал",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("e4d42299-2811-4327-a2ff-1e25a95a14d8"),
                            AttributeGroupId = new Guid("1f9112b2-47ca-4c9c-80a6-c083fb45b90f"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Бассейн без подогрева",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("5417c334-9642-4124-bd89-d7063b787836"),
                            AttributeGroupId = new Guid("1e108ca3-ed8e-44f4-8e67-55b2b372b1f7"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Соляная пещера",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("8883f3d3-e889-4b73-876e-625d6f897214"),
                            AttributeGroupId = new Guid("1e108ca3-ed8e-44f4-8e67-55b2b372b1f7"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Радоновые ванны",
                            IsActive = false
                        },
                        new
                        {
                            Id = new Guid("be156811-ace9-4f1e-ab41-44d3520652f8"),
                            AttributeGroupId = new Guid("1e108ca3-ed8e-44f4-8e67-55b2b372b1f7"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Массаж",
                            IsActive = false
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.AttributeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttributeGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e108ca3-ed8e-44f4-8e67-55b2b372b1f7"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Услуги",
                            IsActive = false,
                            Name = "Service"
                        },
                        new
                        {
                            Id = new Guid("1f9112b2-47ca-4c9c-80a6-c083fb45b90f"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Комфорт на территории",
                            IsActive = false,
                            Name = "SanatoriumComfort"
                        },
                        new
                        {
                            Id = new Guid("3bcb2cba-b30e-4b81-8213-e4bc3f10f0a8"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Комфорт в номере",
                            IsActive = false,
                            Name = "RoomComfort"
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("TourAgencyId");

                    b.HasIndex("TourId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PromoBlocks");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdminRequestStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateAccepted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateCanceled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PromoBlockId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PromoBlockId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("TourAgencyId");

                    b.HasIndex("TourId");

                    b.ToTable("PromoBlockItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoRowItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdminRequestStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateAccepted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateCanceled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("PromoRowItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccommodationRating")
                        .HasColumnType("integer");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntertainmentRating")
                        .HasColumnType("integer");

                    b.Property<int>("FoodRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationRating")
                        .HasColumnType("integer");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<int>("StaffRating")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BedroomCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DoubleBedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MinDaysReservation")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.Property<int>("RoomType")
                        .HasColumnType("integer");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<int>("SingleBedCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomAttributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomGroups");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomReservations");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Sanatoriums");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("SanatoriumAttributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TourAgencyId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TourAgencyId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourAgencyId1");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TourAgencies");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("TourBookings");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany("Contacts")
                        .HasForeignKey("TourAgencyId");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Attribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.AttributeGroup", "AttributeGroup")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeGroup");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Photo", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId");

                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany("Photos")
                        .HasForeignKey("RoomId");

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Photos")
                        .HasForeignKey("SanatoriumId");

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany("Photos")
                        .HasForeignKey("TourAgencyId");

                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany("Photos")
                        .HasForeignKey("TourId");

                    b.Navigation("Place");

                    b.Navigation("Room");

                    b.Navigation("Sanatorium");

                    b.Navigation("Tour");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlockItem", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.PromoBlock", "PromoBlock")
                        .WithMany("PromoBlockItems")
                        .HasForeignKey("PromoBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany()
                        .HasForeignKey("SanatoriumId");

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany()
                        .HasForeignKey("TourAgencyId");

                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.Navigation("PromoBlock");

                    b.Navigation("Room");

                    b.Navigation("Sanatorium");

                    b.Navigation("Tour");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoRowItem", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany()
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Review", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Reviews")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.RoomGroup", "Group")
                        .WithMany("Rooms")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Rooms")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomAttribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomReservation", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumAttribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("SanatoriumAttributes")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumPlace", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Place", "Place")
                        .WithMany("SanatoriumPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("SanatoriumPlaces")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany("Tours")
                        .HasForeignKey("TourAgencyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourBooking", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany("TourBookings")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.AttributeGroup", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlock", b =>
                {
                    b.Navigation("PromoBlockItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomGroup", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");

                    b.Navigation("SanatoriumAttributes");

                    b.Navigation("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("TourBookings");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Photos");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
