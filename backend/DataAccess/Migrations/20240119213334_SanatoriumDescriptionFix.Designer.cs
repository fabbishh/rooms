// <auto-generated />
using System;
using HousingReservation.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ReservationDbContext))]
    [Migration("20240119213334_SanatoriumDescriptionFix")]
    partial class SanatoriumDescriptionFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("TourAgencyId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.FavouriteSanatorium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteSanatoriums");
                });

            modelBuilder.Entity("Domain.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomReservationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomReservationId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Domain.Entities.PromoRowPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("PromoRowPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c961ccd1-f8f7-40aa-aaa2-a4ecd89fff8b"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4788), new TimeSpan(0, 0, 0, 0, 0)),
                            Days = 30,
                            Deleted = false,
                            IsActive = true,
                            Name = "1 месяц",
                            Price = 5000m
                        },
                        new
                        {
                            Id = new Guid("8a8aadba-0a2b-40e8-a6c5-5409136b44c6"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4794), new TimeSpan(0, 0, 0, 0, 0)),
                            Days = 180,
                            Deleted = false,
                            IsActive = true,
                            Name = "6 месяцев",
                            Price = 25000m
                        },
                        new
                        {
                            Id = new Guid("049a090c-96ed-42e2-93a0-3d7f687a9f11"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4796), new TimeSpan(0, 0, 0, 0, 0)),
                            Days = 360,
                            Deleted = false,
                            IsActive = true,
                            Name = "12 месяцев",
                            Price = 45000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.SanatoriumType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SanatoriumTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03785f9c-ecdd-4770-9b5b-78c8f3fc2341"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4936), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Санаторий"
                        },
                        new
                        {
                            Id = new Guid("67e3166e-7810-4fa2-a4cf-b223eb7d03b1"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4939), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Пансионат"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FederalDisctrict")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FiasId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GeonameCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GeonameId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GeonameName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KladrId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameWithType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Okato")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Oktmo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Domain.Entities.TourDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourDates");
                });

            modelBuilder.Entity("Domain.Entities.TourReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("TourReviews");
                });

            modelBuilder.Entity("Domain.Entities.TourTourSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TourSeasonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("TourSeasonId");

                    b.ToTable("TourTourSeasons");
                });

            modelBuilder.Entity("Domain.Entities.TourType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TourTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ef9b18b-8336-4719-8b3b-8e5d6351d457"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4955), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Экскурсия"
                        },
                        new
                        {
                            Id = new Guid("155d1c26-57e7-4025-ab9e-220c5e6f7cac"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4957), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Экспедиция"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed922b7a-222e-436c-ac0d-53c8dcc15851"),
                            Code = "0ffe1abd1a08215353c233d6e009613e95eec4253832a761af28ff37ac5a150c",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4893), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Expires = new DateTimeOffset(new DateTime(2024, 11, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4895), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            UserId = new Guid("9e8d2464-51c3-42b5-bd0d-615e7c9f27b0")
                        },
                        new
                        {
                            Id = new Guid("ce1644b1-b242-49c1-9e00-cf30941e3394"),
                            Code = "0ffe1abd1a08215353c233d6e009613e95eec4253832a761af28ff37ac5a150c",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4909), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Expires = new DateTimeOffset(new DateTime(2024, 11, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4910), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            UserId = new Guid("c5e7a20f-f019-4baf-a986-a04b6b86013a")
                        },
                        new
                        {
                            Id = new Guid("6e335238-7a18-49bd-9a95-233a6729b49b"),
                            Code = "0ffe1abd1a08215353c233d6e009613e95eec4253832a761af28ff37ac5a150c",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4912), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Expires = new DateTimeOffset(new DateTime(2024, 11, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4913), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            UserId = new Guid("b311cf8d-af48-4129-89e0-9f16e7769558")
                        },
                        new
                        {
                            Id = new Guid("c3cae629-e754-4f4a-858e-aff906c980a4"),
                            Code = "0ffe1abd1a08215353c233d6e009613e95eec4253832a761af28ff37ac5a150c",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4915), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Expires = new DateTimeOffset(new DateTime(2024, 11, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4916), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            UserId = new Guid("e0727b36-face-4e75-9371-54908b66fb9b")
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeGroupId");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("347087cc-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4724), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Кондиционер",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("3a994c2e-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4726), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Обогреватель",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("47da53a6-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4729), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Утюг",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("4bd6ee92-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4731), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Гладильная доска",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("534bc1ca-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4733), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Телевизор",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("5dfc8f21-29c4-498c-bc0b-77ac5ab926f9"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4735), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Фен",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("2af46fa8-356e-4dd8-acc7-832f89685965"),
                            AttributeGroupId = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4737), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Wi-Fi",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("a25a807c-5302-4ded-855c-eb9c7680e164"),
                            AttributeGroupId = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4739), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Сауна",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("5212c976-7ddd-4a52-a09d-02e49386ecf1"),
                            AttributeGroupId = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4741), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Спортзал",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("6f0a922d-8c99-4c5f-908a-4acd765d7253"),
                            AttributeGroupId = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4743), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Бассейн без подогрева",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("13fe5d14-ea40-498a-9a98-fcc6e75c405a"),
                            AttributeGroupId = new Guid("f993d082-7ef1-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4745), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Соляная пещера",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("f2bded79-f60c-4db8-9d74-8a4dd6a658fa"),
                            AttributeGroupId = new Guid("f993d082-7ef1-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4747), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Радоновые ванны",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("c17de769-798d-4d53-98c9-c8881e87f1d2"),
                            AttributeGroupId = new Guid("f993d082-7ef1-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4751), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Массаж",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("3d057402-313b-4d79-87ac-8ddeaf2c99a7"),
                            AttributeGroupId = new Guid("5c52815e-e12b-48fd-8429-b0cf4c3e995d"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4753), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Ресторан",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("18aa3fc7-3d11-42e9-aff7-45210c3ee030"),
                            AttributeGroupId = new Guid("5c52815e-e12b-48fd-8429-b0cf4c3e995d"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4754), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Кафе",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("11698eb0-9f0a-45a4-9f41-ca259932e1ab"),
                            AttributeGroupId = new Guid("5c52815e-e12b-48fd-8429-b0cf4c3e995d"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4756), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Столовая",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("ec03b886-017a-4422-8c2c-f24d8f37ac1c"),
                            AttributeGroupId = new Guid("96de2246-871c-4a3d-b8e7-f179816dd483"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4758), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Отдельная кухня в номере",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("2bcfe13b-790f-421f-9495-209944f3ce0d"),
                            AttributeGroupId = new Guid("f2782387-51e8-4d8e-93f7-1d2ba96b09c8"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4761), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Отдельный в номере",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("83ff8a5c-f4ab-42c5-9897-dd8a9fd5bedc"),
                            AttributeGroupId = new Guid("f2782387-51e8-4d8e-93f7-1d2ba96b09c8"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4763), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "На этаже общий",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.AttributeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttributeGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f993d082-7ef1-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4351), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Услуги",
                            IsActive = true,
                            Name = "Service"
                        },
                        new
                        {
                            Id = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4393), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Комфорт на территории",
                            IsActive = true,
                            Name = "SanatoriumComfort"
                        },
                        new
                        {
                            Id = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4395), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Комфорт в номере",
                            IsActive = true,
                            Name = "RoomComfort"
                        },
                        new
                        {
                            Id = new Guid("5c52815e-e12b-48fd-8429-b0cf4c3e995d"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4397), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Питание в санатории",
                            IsActive = true,
                            Name = "SanatoriumFood"
                        },
                        new
                        {
                            Id = new Guid("96de2246-871c-4a3d-b8e7-f179816dd483"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4402), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Питание в номере",
                            IsActive = true,
                            Name = "RoomFood"
                        },
                        new
                        {
                            Id = new Guid("f2782387-51e8-4d8e-93f7-1d2ba96b09c8"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4404), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            FriendlyName = "Санузел",
                            IsActive = true,
                            Name = "RoomBathroom"
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RoomGroupId");

                    b.HasIndex("TourId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("PromoBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71bb6a81-b4d1-4cce-8d62-8a2082667faa"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4817), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Промо блок 1",
                            Price = 5000m
                        },
                        new
                        {
                            Id = new Guid("03edae16-f426-4a37-8a83-081a44c3e17a"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4821), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Промо блок 2",
                            Price = 5000m
                        },
                        new
                        {
                            Id = new Guid("c9bc5230-a03c-4aee-980a-3995abe2dbe3"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4823), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Промо блок 3",
                            Price = 5000m
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdminRequestStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateAccepted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateCanceled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PromoBlockId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PromoBlockId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("TourAgencyId");

                    b.HasIndex("TourId");

                    b.ToTable("PromoBlockItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoRowItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdminRequestStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateAccepted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateCanceled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PromoRowPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PromoRowPlanId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("PromoRowItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CleanlinessRating")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("EntertainmentRating")
                        .HasColumnType("integer");

                    b.Property<int>("FoodRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationRating")
                        .HasColumnType("integer");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<int>("StaffRating")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TherapyRating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("RoomGroupId");

                    b.ToTable("RoomAttributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BedroomCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DoubleBedCount")
                        .HasColumnType("integer");

                    b.Property<int>("HousingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MinDaysReservation")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.Property<int>("RoomType")
                        .HasColumnType("integer");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<int>("SingleBedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("RoomGroups");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdultGuestsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ChildGuestsCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GuestComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("SanatoriumAdminComment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomReservations");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckInTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CheckOutTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TypeId");

                    b.ToTable("Sanatoriums");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("SanatoriumAttributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("PriceByGroup")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceByTourist")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("TouristCountFrom")
                        .HasColumnType("integer");

                    b.Property<int>("TouristCountTo")
                        .HasColumnType("integer");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TourAgencyId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TourAgencies");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourDateBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TourDateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourDateId");

                    b.HasIndex("UserId");

                    b.ToTable("TourDateBookings");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TourSeasons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a870a5ca-f146-4faf-87ec-e482b2a5b96b"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4842), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Зима",
                            Value = 0
                        },
                        new
                        {
                            Id = new Guid("1d1b1fb6-3bb5-47bc-a29c-e1448f4c354f"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4844), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Весна",
                            Value = 1
                        },
                        new
                        {
                            Id = new Guid("4c00d748-1da9-42e0-8a2f-5bd5efb9f228"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4846), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Лето",
                            Value = 2
                        },
                        new
                        {
                            Id = new Guid("fe73dfc4-17b6-425a-b6fb-38739e74369e"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4847), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Осень",
                            Value = 3
                        },
                        new
                        {
                            Id = new Guid("7c63ca4c-bdeb-4fbf-b143-f8fa8b051865"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4849), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            IsActive = true,
                            Name = "Круглогодично",
                            Value = 4
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e8d2464-51c3-42b5-bd0d-615e7c9f27b0"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4867), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Email = "admin@test.ru",
                            IsActive = true,
                            IsEmailConfirmed = false,
                            IsPhoneNumberConfirmed = false,
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("c5e7a20f-f019-4baf-a986-a04b6b86013a"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4871), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Email = "touragency@test.ru",
                            IsActive = true,
                            IsEmailConfirmed = false,
                            IsPhoneNumberConfirmed = false,
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("b311cf8d-af48-4129-89e0-9f16e7769558"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4873), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Email = "sanatorium@test.ru",
                            IsActive = true,
                            IsEmailConfirmed = false,
                            IsPhoneNumberConfirmed = false,
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("e0727b36-face-4e75-9371-54908b66fb9b"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 1, 19, 21, 33, 34, 15, DateTimeKind.Unspecified).AddTicks(4875), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Email = "user@test.ru",
                            IsActive = true,
                            IsEmailConfirmed = false,
                            IsPhoneNumberConfirmed = false,
                            Role = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Contacts")
                        .HasForeignKey("SanatoriumId");

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany("Contacts")
                        .HasForeignKey("TourAgencyId");

                    b.Navigation("Sanatorium");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("Domain.Entities.FavouriteSanatorium", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Favourites")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sanatorium");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Guest", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.RoomReservation", "RoomReservation")
                        .WithMany("Guests")
                        .HasForeignKey("RoomReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomReservation");
                });

            modelBuilder.Entity("Domain.Entities.TourDate", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany("TourDates")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Domain.Entities.TourReview", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany("Reviews")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TourTourSeason", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany("Seasons")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.TourSeason", "TourSeason")
                        .WithMany()
                        .HasForeignKey("TourSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("TourSeason");
                });

            modelBuilder.Entity("Domain.Entities.UserCode", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany("Codes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Attribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.AttributeGroup", "AttributeGroup")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeGroup");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Photo", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId");

                    b.HasOne("HousingReservation.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany("Photos")
                        .HasForeignKey("RoomGroupId");

                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany("Photos")
                        .HasForeignKey("TourId");

                    b.Navigation("Place");

                    b.Navigation("RoomGroup");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Place", b =>
                {
                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlockItem", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.PromoBlock", "PromoBlock")
                        .WithMany("PromoBlockItems")
                        .HasForeignKey("PromoBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany()
                        .HasForeignKey("SanatoriumId");

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany()
                        .HasForeignKey("TourAgencyId");

                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.Navigation("PromoBlock");

                    b.Navigation("Room");

                    b.Navigation("Sanatorium");

                    b.Navigation("Tour");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoRowItem", b =>
                {
                    b.HasOne("Domain.Entities.PromoRowPlan", "PromoRowPlan")
                        .WithMany("PromoRowItems")
                        .HasForeignKey("PromoRowPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("PromoRowItems")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoRowPlan");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Review", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Reviews")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sanatorium");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.RoomGroup", "Group")
                        .WithMany("Rooms")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomAttribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany("Attributes")
                        .HasForeignKey("RoomGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("RoomGroup");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomGroup", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("RoomGroups")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomReservation", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SanatoriumType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Photo");

                    b.Navigation("Subject");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumAttribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("SanatoriumAttributes")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumPlace", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Place", "Place")
                        .WithMany("SanatoriumPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("SanatoriumPlaces")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany("Tours")
                        .HasForeignKey("TourAgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TourType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("TourAgency");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Photo");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourDateBooking", b =>
                {
                    b.HasOne("Domain.Entities.TourDate", "TourDate")
                        .WithMany("TourBookings")
                        .HasForeignKey("TourDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourDate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PromoRowPlan", b =>
                {
                    b.Navigation("PromoRowItems");
                });

            modelBuilder.Entity("Domain.Entities.TourDate", b =>
                {
                    b.Navigation("TourBookings");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.AttributeGroup", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlock", b =>
                {
                    b.Navigation("PromoBlockItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomGroup", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Photos");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomReservation", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Favourites");

                    b.Navigation("PromoRowItems");

                    b.Navigation("Reviews");

                    b.Navigation("RoomGroups");

                    b.Navigation("SanatoriumAttributes");

                    b.Navigation("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");

                    b.Navigation("Seasons");

                    b.Navigation("TourDates");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.User", b =>
                {
                    b.Navigation("Codes");

                    b.Navigation("Favourites");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
