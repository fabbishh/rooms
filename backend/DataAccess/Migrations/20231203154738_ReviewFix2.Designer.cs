// <auto-generated />
using System;
using HousingReservation.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ReservationDbContext))]
    [Migration("20231203154738_ReviewFix2")]
    partial class ReviewFix2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("TourAgencyId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomReservationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomReservationId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FederalDisctrict")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FiasId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GeonameCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GeonameId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GeonameName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KladrId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameWithType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Okato")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Oktmo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Domain.Entities.TourDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourDate");
                });

            modelBuilder.Entity("Domain.Entities.TourType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TourTypes");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeGroupId");

                    b.HasIndex("RoomId");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("347087cc-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1850), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Кондиционер",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("3a994c2e-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1853), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Обогреватель",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("47da53a6-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1855), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Утюг",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("4bd6ee92-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1857), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Гладильная доска",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("534bc1ca-7ef2-11ee-b962-0242ac120002"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1859), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Телевизор",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("5dfc8f21-29c4-498c-bc0b-77ac5ab926f9"),
                            AttributeGroupId = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1862), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Фен",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("2af46fa8-356e-4dd8-acc7-832f89685965"),
                            AttributeGroupId = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1864), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Wi-Fi",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("a25a807c-5302-4ded-855c-eb9c7680e164"),
                            AttributeGroupId = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1866), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Сауна",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("5212c976-7ddd-4a52-a09d-02e49386ecf1"),
                            AttributeGroupId = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1868), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Спортзал",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("6f0a922d-8c99-4c5f-908a-4acd765d7253"),
                            AttributeGroupId = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1870), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Бассейн без подогрева",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("13fe5d14-ea40-498a-9a98-fcc6e75c405a"),
                            AttributeGroupId = new Guid("f993d082-7ef1-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1872), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Соляная пещера",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("f2bded79-f60c-4db8-9d74-8a4dd6a658fa"),
                            AttributeGroupId = new Guid("f993d082-7ef1-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1874), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Радоновые ванны",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("c17de769-798d-4d53-98c9-c8881e87f1d2"),
                            AttributeGroupId = new Guid("f993d082-7ef1-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1876), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Массаж",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.AttributeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttributeGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f993d082-7ef1-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1576), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Услуги",
                            IsActive = true,
                            Name = "Service"
                        },
                        new
                        {
                            Id = new Guid("22462aca-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1615), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Комфорт на территории",
                            IsActive = true,
                            Name = "SanatoriumComfort"
                        },
                        new
                        {
                            Id = new Guid("2d1674d2-7ef2-11ee-b962-0242ac120002"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 18, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1618), new TimeSpan(0, 3, 0, 0, 0)),
                            FriendlyName = "Комфорт в номере",
                            IsActive = true,
                            Name = "RoomComfort"
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.BathroomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BathroomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("692ccc6f-4721-4946-8790-b31b6707d3d3"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 15, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1914), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Отдельный",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("37d57656-b9ad-4c98-8063-b70183a88115"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 15, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1916), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "На территории санатория",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.MealType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MealTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d484004-6682-4555-a2b5-15dc28da5a60"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 15, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1898), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "Отдельная",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("af4944ce-e920-4c83-86dd-4a078182a28d"),
                            DateCreated = new DateTimeOffset(new DateTime(2023, 12, 3, 15, 47, 38, 230, DateTimeKind.Unspecified).AddTicks(1899), new TimeSpan(0, 0, 0, 0, 0)),
                            FriendlyName = "На территории санатория",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("TourAgencyId");

                    b.HasIndex("TourId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PromoBlocks");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdminRequestStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateAccepted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateCanceled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PromoBlockId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PromoBlockId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("TourAgencyId");

                    b.HasIndex("TourId");

                    b.ToTable("PromoBlockItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoRowItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdminRequestStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateAccepted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateCanceled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("PromoRowItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CleanlinessRating")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntertainmentRating")
                        .HasColumnType("integer");

                    b.Property<int>("FoodRating")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationRating")
                        .HasColumnType("integer");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<int>("StaffRating")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TherapyRating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SanatoriumId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BathroomTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("BedroomCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DoubleBedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MealTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("MinDaysReservation")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.Property<int>("RoomType")
                        .HasColumnType("integer");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.Property<int>("SingleBedCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BathroomTypeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MealTypeId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomAttributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomGroups");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdultGuestsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ChildGuestsCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GuestComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("SanatoriumAdminComment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomReservations");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckInTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CheckOutTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ObjectType")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Sanatoriums");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("SanatoriumAttributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SanatoriumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("SanatoriumId");

                    b.ToTable("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("PriceByGroup")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceByTourist")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("TouristCountFrom")
                        .HasColumnType("integer");

                    b.Property<int>("TouristCountTo")
                        .HasColumnType("integer");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TourAgencyId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TourAgencies");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourDateBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TourDateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourDateId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("TourDateBookings");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Contacts")
                        .HasForeignKey("SanatoriumId");

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany("Contacts")
                        .HasForeignKey("TourAgencyId");

                    b.Navigation("Sanatorium");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("Domain.Entities.Guest", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.RoomReservation", "RoomReservation")
                        .WithMany("Guests")
                        .HasForeignKey("RoomReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomReservation");
                });

            modelBuilder.Entity("Domain.Entities.TourDate", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany("TourDates")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Attribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.AttributeGroup", "AttributeGroup")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Room", null)
                        .WithMany("Attributes")
                        .HasForeignKey("RoomId");

                    b.Navigation("AttributeGroup");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Photo", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId");

                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany("Photos")
                        .HasForeignKey("RoomId");

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Photos")
                        .HasForeignKey("SanatoriumId");

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany("Photos")
                        .HasForeignKey("TourAgencyId");

                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany("Photos")
                        .HasForeignKey("TourId");

                    b.Navigation("Place");

                    b.Navigation("Room");

                    b.Navigation("Sanatorium");

                    b.Navigation("Tour");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlockItem", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.PromoBlock", "PromoBlock")
                        .WithMany("PromoBlockItems")
                        .HasForeignKey("PromoBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany()
                        .HasForeignKey("SanatoriumId");

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany()
                        .HasForeignKey("TourAgencyId");

                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId");

                    b.Navigation("PromoBlock");

                    b.Navigation("Room");

                    b.Navigation("Sanatorium");

                    b.Navigation("Tour");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoRowItem", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany()
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Review", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Reviews")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sanatorium");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.BathroomType", "BathroomType")
                        .WithMany()
                        .HasForeignKey("BathroomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.RoomGroup", "Group")
                        .WithMany("Rooms")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.MealType", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("Rooms")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BathroomType");

                    b.Navigation("Group");

                    b.Navigation("MealType");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomAttribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomReservation", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumAttribute", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("SanatoriumAttributes")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.SanatoriumPlace", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.Place", "Place")
                        .WithMany("SanatoriumPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.Sanatorium", "Sanatorium")
                        .WithMany("SanatoriumPlaces")
                        .HasForeignKey("SanatoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Sanatorium");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany("Tours")
                        .HasForeignKey("TourAgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TourType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("TourAgency");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.HasOne("HousingReservation.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourDateBooking", b =>
                {
                    b.HasOne("Domain.Entities.TourDate", null)
                        .WithMany("TourBookings")
                        .HasForeignKey("TourDateId");

                    b.HasOne("HousingReservation.Domain.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingReservation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TourDate", b =>
                {
                    b.Navigation("TourBookings");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.AttributeGroup", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.PromoBlock", b =>
                {
                    b.Navigation("PromoBlockItems");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Room", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Photos");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomGroup", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.RoomReservation", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Sanatorium", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Photos");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");

                    b.Navigation("SanatoriumAttributes");

                    b.Navigation("SanatoriumPlaces");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.Tour", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("TourDates");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.TourAgency", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Photos");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("HousingReservation.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
